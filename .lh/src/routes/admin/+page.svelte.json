{
    "sourceFile": "src/routes/admin/+page.svelte",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1739970962984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739970968299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n <script>\n-\timport { dataStore } from \"$lib/stores\"; // Store importieren\n+\timport { dataStore } from '$lib/stores'; // Store importieren\n \tlet date = new Date();\n \tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n \tlet data = [];\n \n@@ -72,20 +72,23 @@\n \n \t\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n \t\t\tconsole.log('üìä Eingelesene Zeilen:', rows);\n \n-\t\t\tdataStore.set(rows\n-  .filter((row) => row.length >= 4) // Mindestens 4 Spalten erforderlich\n-  .map((row) => ({\n-    datum: row[0].trim(),\n-    zeit: row[1].trim(),\n-    wert: row[2].trim(),\n-    sport: row[3].trim()\n-  }))\n-);\n+\t\t\tdata = rows\n+\t\t\t\t.filter((row) => row.length >= 4) // Mindestens 4 Spalten erforderlich\n+\t\t\t\t.map((row) => ({\n+\t\t\t\t\tdatum: row[0].trim(),\n+\t\t\t\t\tzeit: row[1].trim(),\n+\t\t\t\t\twert: row[2].trim(),\n+\t\t\t\t\tsport: row[3].trim()\n+\t\t\t\t}));\n \n-console.log(\"‚úÖ Importierte Daten:\", $dataStore); // Debug-Ausgabe f√ºr den Store\n-alert(\"CSV-Daten erfolgreich importiert!\");\n+\t\t\tconsole.log('‚úÖ Importierte Daten:', data);\n+\t\t\talert('CSV-Daten erfolgreich importiert!');\n+\t\t};\n+\n+\t\treader.onerror = () => alert('Fehler beim Lesen der Datei.');\n+\t\treader.readAsText(selectedFile);\n \t}\n </script>\n \n <main>\n"
                },
                {
                    "date": 1739971082942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,18 +72,20 @@\n \n \t\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n \t\t\tconsole.log('üìä Eingelesene Zeilen:', rows);\n \n-\t\t\tdata = rows\n+\t\t\tconst importedData = rows\n \t\t\t\t.filter((row) => row.length >= 4) // Mindestens 4 Spalten erforderlich\n \t\t\t\t.map((row) => ({\n \t\t\t\t\tdatum: row[0].trim(),\n \t\t\t\t\tzeit: row[1].trim(),\n \t\t\t\t\twert: row[2].trim(),\n \t\t\t\t\tsport: row[3].trim()\n \t\t\t\t}));\n \n-\t\t\tconsole.log('‚úÖ Importierte Daten:', data);\n+\t\t\tdataStore.set(importedData); // Speichert die Daten im globalen Store\n+\n+\t\t\tconsole.log('‚úÖ Importierte Daten:', importedData);\n \t\t\talert('CSV-Daten erfolgreich importiert!');\n \t\t};\n \n \t\treader.onerror = () => alert('Fehler beim Lesen der Datei.');\n"
                },
                {
                    "date": 1739971209196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+<script>\n+\timport { dataStore } from '$lib/stores'; // Store importieren\n+\tlet date = new Date();\n+\tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n+\tlet data = [];\n+\n+\tlet sportarten = [\n+\t\t'Crosstrainer',\n+\t\t'Beinpressing',\n+\t\t'Bauch',\n+\t\t'R√ºcken',\n+\t\t'H√ºfte au√üen',\n+\t\t'Bauch seitlich',\n+\t\t'Schulter',\n+\t\t'H√ºfte innen',\n+\t\t'Laufband Grundlagen',\n+\t\t'Laufband Intervall',\n+\t\t'Laufen outdoor Grundlagen',\n+\t\t'Laufen outdoor Intervall',\n+\t\t'Neues Ger√§t hinzuf√ºgen...'\n+\t];\n+\n+\tlet selectedFile = null; // Speichert die ausgew√§hlte Datei\n+\n+\tfunction addRow() {\n+\t\tdata = [...data, { ...newRow }];\n+\t\tdataStore.set(data); // Speichert die Daten im Store\n+\t\tnewRow = { datum: '', zeit: '', wert: '', sport: '' };\n+\t}\n+\n+\tfunction deleteRow(index) {\n+\t\tdata = data.filter((_, i) => i !== index);\n+\t}\n+\n+\tfunction changeMonth(delta) {\n+\t\tdate.setMonth(date.getMonth() + delta);\n+\t}\n+\n+\tfunction handleSportChange(event) {\n+\t\tif (event.target.value === 'Neues Ger√§t hinzuf√ºgen...') {\n+\t\t\tlet neuesGeraet = prompt('Gib den Namen des neuen Ger√§ts ein:');\n+\t\t\tif (neuesGeraet && !sportarten.includes(neuesGeraet)) {\n+\t\t\t\tsportarten = [...sportarten.slice(0, -1), neuesGeraet, 'Neues Ger√§t hinzuf√ºgen...'];\n+\t\t\t\tnewRow.sport = neuesGeraet;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tnewRow.sport = event.target.value;\n+\t\t}\n+\t}\n+\n+\tfunction handleFileSelect(event) {\n+\t\tselectedFile = event.target.files[0]; // Speichert die ausgew√§hlte Datei\n+\t}\n+\n+\tfunction importCSV() {\n+\t\tconsole.log('üìå importCSV() wurde aufgerufen!'); // Pr√ºfen, ob die Funktion aufgerufen wird\n+\n+\t\tif (!selectedFile) {\n+\t\t\talert('Bitte zuerst eine CSV-Datei ausw√§hlen.');\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tconst reader = new FileReader();\n+\t\treader.onload = (e) => {\n+\t\t\tconsole.log('üìÇ CSV-Datei wurde erfolgreich gelesen!'); // Debugging-Ausgabe\n+\t\t\tconst text = e.target.result;\n+\t\t\tconsole.log('üìÇ Gelesene CSV-Datei:', text);\n+\n+\t\t\t// Automatische Erkennung des Trennzeichens\n+\t\t\tconst delimiter = text.includes(';') ? ';' : ',';\n+\t\t\tconsole.log('Trennzeichen erkannt:', delimiter);\n+\n+\t\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n+\t\t\tconsole.log('üìä Eingelesene Zeilen:', rows);\n+\n+\t\t\tdata = rows\n+\t\t\t\t.filter((row) => row.length >= 4) // Mindestens 4 Spalten erforderlich\n+\t\t\t\t.map((row) => ({\n+\t\t\t\t\tdatum: row[0].trim(),\n+\t\t\t\t\tzeit: row[1].trim(),\n+\t\t\t\t\twert: row[2].trim(),\n+\t\t\t\t\tsport: row[3].trim()\n+\t\t\t\t}));\n+\n+\t\t\tconsole.log('‚úÖ Importierte Daten:', data);\n+\t\t\talert('CSV-Daten erfolgreich importiert!');\n+\t\t};\n+\n+\t\treader.onerror = () => alert('Fehler beim Lesen der Datei.');\n+\t\treader.readAsText(selectedFile);\n+\t}\n+</script>\n+\n+<main>\n+\t<h1>Daten Eingeben</h1>\n+\n+\t<nav>\n+\t\t<button on:click={() => changeMonth(-1)}>‚¨Ö Vorheriger Monat</button>\n+\t\t<span>{date.toLocaleDateString()}</span>\n+\t\t<button on:click={() => changeMonth(1)}>N√§chster Monat ‚û°</button>\n+\t</nav>\n+\n+\t<!-- CSV-Upload mit Best√§tigungsbutton -->\n+\t<div>\n+\t\t<input type=\"file\" accept=\".csv\" on:change={handleFileSelect} />\n+\t\t<button on:click={importCSV}>üìÇ CSV hochladen</button>\n+\t</div>\n+\n+\t<table>\n+\t\t<thead>\n+\t\t\t<tr>\n+\t\t\t\t<th>Datum</th>\n+\t\t\t\t<th>Zeit</th>\n+\t\t\t\t<th>Gewicht/Dauer</th>\n+\t\t\t\t<th>Ger√§t/Sportart</th>\n+\t\t\t\t<th>Aktion</th>\n+\t\t\t</tr>\n+\t\t</thead>\n+\t\t<tbody>\n+\t\t\t{#each data as row, i}\n+\t\t\t\t<tr>\n+\t\t\t\t\t<td>{row.datum}</td>\n+\t\t\t\t\t<td>{row.zeit}</td>\n+\t\t\t\t\t<td>{row.wert}</td>\n+\t\t\t\t\t<td>{row.sport}</td>\n+\t\t\t\t\t<td>\n+\t\t\t\t\t\t<button on:click={() => deleteRow(i)}>üóëÔ∏è</button>\n+\t\t\t\t\t</td>\n+\t\t\t\t</tr>\n+\t\t\t{/each}\n+\n+\t\t\t<tr>\n+\t\t\t\t<td><input bind:value={newRow.datum} type=\"date\" /></td>\n+\t\t\t\t<td><input bind:value={newRow.zeit} type=\"time\" /></td>\n+\t\t\t\t<td><input bind:value={newRow.wert} /></td>\n+\t\t\t\t<td>\n+\t\t\t\t\t<select bind:value={newRow.sport} on:change={handleSportChange}>\n+\t\t\t\t\t\t{#each sportarten as sport}\n+\t\t\t\t\t\t\t<option value={sport}>{sport}</option>\n+\t\t\t\t\t\t{/each}\n+\t\t\t\t\t</select>\n+\t\t\t\t</td>\n+\t\t\t\t<td><button on:click={addRow}>‚ûï</button></td>\n+\t\t\t</tr>\n+\t\t</tbody>\n+\t</table>\n+</main>\n+\n+<style>\n+\ttable {\n+\t\twidth: 100%;\n+\t\tborder-collapse: collapse;\n+\t\tmargin-top: 10px;\n+\t}\n+\tth,\n+\ttd {\n+\t\tborder: 1px solid #ddd;\n+\t\tpadding: 8px;\n+\t\ttext-align: left;\n+\t}\n+\tth {\n+\t\tbackground: #f4f4f4;\n+\t}\n+\tinput,\n+\tselect {\n+\t\twidth: 100%;\n+\t\tpadding: 4px;\n+\t}\n+\tnav {\n+\t\tdisplay: flex;\n+\t\tgap: 10px;\n+\t\tmargin-bottom: 10px;\n+\t}\n+\tdiv {\n+\t\tmargin-bottom: 10px;\n+\t}\n+</style>\n"
                },
                {
                    "date": 1739971301011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n <script>\n-\timport { dataStore } from '$lib/stores'; // Store importieren\n+\timport { dataStore } from '$lib/stores'; // Import des globalen Stores\n \tlet date = new Date();\n \tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n \tlet data = [];\n \n@@ -19,268 +19,65 @@\n \t\t'Laufen outdoor Intervall',\n \t\t'Neues Ger√§t hinzuf√ºgen...'\n \t];\n \n-\tlet selectedFile = null; // Speichert die ausgew√§hlte Datei\n+\tlet selectedFile = null;\n \n \tfunction addRow() {\n \t\tdata = [...data, { ...newRow }];\n-\t\tdataStore.set(data); // Speichert die Daten im Store\n+\t\tdataStore.set(data); // Daten in den globalen Store speichern\n \t\tnewRow = { datum: '', zeit: '', wert: '', sport: '' };\n \t}\n \n \tfunction deleteRow(index) {\n \t\tdata = data.filter((_, i) => i !== index);\n+\t\tdataStore.set(data); // Store wird aktualisiert\n \t}\n \n-\tfunction changeMonth(delta) {\n-\t\tdate.setMonth(date.getMonth() + delta);\n-\t}\n-\n-\tfunction handleSportChange(event) {\n-\t\tif (event.target.value === 'Neues Ger√§t hinzuf√ºgen...') {\n-\t\t\tlet neuesGeraet = prompt('Gib den Namen des neuen Ger√§ts ein:');\n-\t\t\tif (neuesGeraet && !sportarten.includes(neuesGeraet)) {\n-\t\t\t\tsportarten = [...sportarten.slice(0, -1), neuesGeraet, 'Neues Ger√§t hinzuf√ºgen...'];\n-\t\t\t\tnewRow.sport = neuesGeraet;\n-\t\t\t}\n-\t\t} else {\n-\t\t\tnewRow.sport = event.target.value;\n-\t\t}\n-\t}\n-\n \tfunction handleFileSelect(event) {\n \t\tselectedFile = event.target.files[0]; // Speichert die ausgew√§hlte Datei\n \t}\n \n \tfunction importCSV() {\n-\t\tconsole.log('üìå importCSV() wurde aufgerufen!'); // Pr√ºfen, ob die Funktion aufgerufen wird\n-\n \t\tif (!selectedFile) {\n \t\t\talert('Bitte zuerst eine CSV-Datei ausw√§hlen.');\n \t\t\treturn;\n \t\t}\n \n \t\tconst reader = new FileReader();\n \t\treader.onload = (e) => {\n-\t\t\tconsole.log('üìÇ CSV-Datei wurde erfolgreich gelesen!'); // Debugging-Ausgabe\n \t\t\tconst text = e.target.result;\n-\t\t\tconsole.log('üìÇ Gelesene CSV-Datei:', text);\n-\n-\t\t\t// Automatische Erkennung des Trennzeichens\n \t\t\tconst delimiter = text.includes(';') ? ';' : ',';\n-\t\t\tconsole.log('Trennzeichen erkannt:', delimiter);\n-\n \t\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n-\t\t\tconsole.log('üìä Eingelesene Zeilen:', rows);\n \n-\t\t\tdata = rows\n-\t\t\t\t.filter((row) => row.length >= 4) // Mindestens 4 Spalten erforderlich\n-\t\t\t\t.map((row) => ({\n-\t\t\t\t\tdatum: row[0].trim(),\n-\t\t\t\t\tzeit: row[1].trim(),\n-\t\t\t\t\twert: row[2].trim(),\n-\t\t\t\t\tsport: row[3].trim()\n-\t\t\t\t}));\n-\n-\t\t\tconsole.log('‚úÖ Importierte Daten:', data);\n-\t\t\talert('CSV-Daten erfolgreich importiert!');\n-\t\t};\n-\n-\t\treader.onerror = () => alert('Fehler beim Lesen der Datei.');\n-\t\treader.readAsText(selectedFile);\n-\t}\n-</script>\n-\n-<main>\n-\t<h1>Daten Eingeben</h1>\n-\n-\t<nav>\n-\t\t<button on:click={() => changeMonth(-1)}>‚¨Ö Vorheriger Monat</button>\n-\t\t<span>{date.toLocaleDateString()}</span>\n-\t\t<button on:click={() => changeMonth(1)}>N√§chster Monat ‚û°</button>\n-\t</nav>\n-\n-\t<!-- CSV-Upload mit Best√§tigungsbutton -->\n-\t<div>\n-\t\t<input type=\"file\" accept=\".csv\" on:change={handleFileSelect} />\n-\t\t<button on:click={importCSV}>üìÇ CSV hochladen</button>\n-\t</div>\n-\n-\t<table>\n-\t\t<thead>\n-\t\t\t<tr>\n-\t\t\t\t<th>Datum</th>\n-\t\t\t\t<th>Zeit</th>\n-\t\t\t\t<th>Gewicht/Dauer</th>\n-\t\t\t\t<th>Ger√§t/Sportart</th>\n-\t\t\t\t<th>Aktion</th>\n-\t\t\t</tr>\n-\t\t</thead>\n-\t\t<tbody>\n-\t\t\t{#each data as row, i}\n-\t\t\t\t<tr>\n-\t\t\t\t\t<td>{row.datum}</td>\n-\t\t\t\t\t<td>{row.zeit}</td>\n-\t\t\t\t\t<td>{row.wert}</td>\n-\t\t\t\t\t<td>{row.sport}</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<button on:click={() => deleteRow(i)}>üóëÔ∏è</button>\n-\t\t\t\t\t</td>\n-\t\t\t\t</tr>\n-\t\t\t{/each}\n-\n-\t\t\t<tr>\n-\t\t\t\t<td><input bind:value={newRow.datum} type=\"date\" /></td>\n-\t\t\t\t<td><input bind:value={newRow.zeit} type=\"time\" /></td>\n-\t\t\t\t<td><input bind:value={newRow.wert} /></td>\n-\t\t\t\t<td>\n-\t\t\t\t\t<select bind:value={newRow.sport} on:change={handleSportChange}>\n-\t\t\t\t\t\t{#each sportarten as sport}\n-\t\t\t\t\t\t\t<option value={sport}>{sport}</option>\n-\t\t\t\t\t\t{/each}\n-\t\t\t\t\t</select>\n-\t\t\t\t</td>\n-\t\t\t\t<td><button on:click={addRow}>‚ûï</button></td>\n-\t\t\t</tr>\n-\t\t</tbody>\n-\t</table>\n-</main>\n-\n-<style>\n-\ttable {\n-\t\twidth: 100%;\n-\t\tborder-collapse: collapse;\n-\t\tmargin-top: 10px;\n-\t}\n-\tth,\n-\ttd {\n-\t\tborder: 1px solid #ddd;\n-\t\tpadding: 8px;\n-\t\ttext-align: left;\n-\t}\n-\tth {\n-\t\tbackground: #f4f4f4;\n-\t}\n-\tinput,\n-\tselect {\n-\t\twidth: 100%;\n-\t\tpadding: 4px;\n-\t}\n-\tnav {\n-\t\tdisplay: flex;\n-\t\tgap: 10px;\n-\t\tmargin-bottom: 10px;\n-\t}\n-\tdiv {\n-\t\tmargin-bottom: 10px;\n-\t}\n-</style>\n-<script>\n-\timport { dataStore } from '$lib/stores'; // Store importieren\n-\tlet date = new Date();\n-\tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n-\tlet data = [];\n-\n-\tlet sportarten = [\n-\t\t'Crosstrainer',\n-\t\t'Beinpressing',\n-\t\t'Bauch',\n-\t\t'R√ºcken',\n-\t\t'H√ºfte au√üen',\n-\t\t'Bauch seitlich',\n-\t\t'Schulter',\n-\t\t'H√ºfte innen',\n-\t\t'Laufband Grundlagen',\n-\t\t'Laufband Intervall',\n-\t\t'Laufen outdoor Grundlagen',\n-\t\t'Laufen outdoor Intervall',\n-\t\t'Neues Ger√§t hinzuf√ºgen...'\n-\t];\n-\n-\tlet selectedFile = null; // Speichert die ausgew√§hlte Datei\n-\n-\tfunction addRow() {\n-\t\tdata = [...data, { ...newRow }];\n-\t\tdataStore.set(data); // Speichert die Daten im Store\n-\t\tnewRow = { datum: '', zeit: '', wert: '', sport: '' };\n-\t}\n-\n-\tfunction deleteRow(index) {\n-\t\tdata = data.filter((_, i) => i !== index);\n-\t}\n-\n-\tfunction changeMonth(delta) {\n-\t\tdate.setMonth(date.getMonth() + delta);\n-\t}\n-\n-\tfunction handleSportChange(event) {\n-\t\tif (event.target.value === 'Neues Ger√§t hinzuf√ºgen...') {\n-\t\t\tlet neuesGeraet = prompt('Gib den Namen des neuen Ger√§ts ein:');\n-\t\t\tif (neuesGeraet && !sportarten.includes(neuesGeraet)) {\n-\t\t\t\tsportarten = [...sportarten.slice(0, -1), neuesGeraet, 'Neues Ger√§t hinzuf√ºgen...'];\n-\t\t\t\tnewRow.sport = neuesGeraet;\n-\t\t\t}\n-\t\t} else {\n-\t\t\tnewRow.sport = event.target.value;\n-\t\t}\n-\t}\n-\n-\tfunction handleFileSelect(event) {\n-\t\tselectedFile = event.target.files[0]; // Speichert die ausgew√§hlte Datei\n-\t}\n-\n-\tfunction importCSV() {\n-\t\tconsole.log('üìå importCSV() wurde aufgerufen!'); // Pr√ºfen, ob die Funktion aufgerufen wird\n-\n-\t\tif (!selectedFile) {\n-\t\t\talert('Bitte zuerst eine CSV-Datei ausw√§hlen.');\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tconst reader = new FileReader();\n-\t\treader.onload = (e) => {\n-\t\t\tconsole.log('üìÇ CSV-Datei wurde erfolgreich gelesen!'); // Debugging-Ausgabe\n-\t\t\tconst text = e.target.result;\n-\t\t\tconsole.log('üìÇ Gelesene CSV-Datei:', text);\n-\n-\t\t\t// Automatische Erkennung des Trennzeichens\n-\t\t\tconst delimiter = text.includes(';') ? ';' : ',';\n-\t\t\tconsole.log('Trennzeichen erkannt:', delimiter);\n-\n-\t\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n-\t\t\tconsole.log('üìä Eingelesene Zeilen:', rows);\n-\n \t\t\tconst importedData = rows\n-\t\t\t\t.filter((row) => row.length >= 4) // Mindestens 4 Spalten erforderlich\n+\t\t\t\t.filter((row) => row.length >= 4)\n \t\t\t\t.map((row) => ({\n \t\t\t\t\tdatum: row[0].trim(),\n \t\t\t\t\tzeit: row[1].trim(),\n \t\t\t\t\twert: row[2].trim(),\n \t\t\t\t\tsport: row[3].trim()\n \t\t\t\t}));\n \n \t\t\tdataStore.set(importedData); // Speichert die Daten im globalen Store\n-\n \t\t\tconsole.log('‚úÖ Importierte Daten:', importedData);\n \t\t\talert('CSV-Daten erfolgreich importiert!');\n \t\t};\n \n-\t\treader.onerror = () => alert('Fehler beim Lesen der Datei.');\n \t\treader.readAsText(selectedFile);\n \t}\n </script>\n \n <main>\n \t<h1>Daten Eingeben</h1>\n \n \t<nav>\n-\t\t<button on:click={() => changeMonth(-1)}>‚¨Ö Vorheriger Monat</button>\n+\t\t<button on:click={() => date.setMonth(date.getMonth() - 1)}>‚¨Ö Vorheriger Monat</button>\n \t\t<span>{date.toLocaleDateString()}</span>\n-\t\t<button on:click={() => changeMonth(1)}>N√§chster Monat ‚û°</button>\n+\t\t<button on:click={() => date.setMonth(date.getMonth() + 1)}>N√§chster Monat ‚û°</button>\n \t</nav>\n \n-\t<!-- CSV-Upload mit Best√§tigungsbutton -->\n+\t<!-- CSV-Upload -->\n \t<div>\n \t\t<input type=\"file\" accept=\".csv\" on:change={handleFileSelect} />\n \t\t<button on:click={importCSV}>üìÇ CSV hochladen</button>\n \t</div>\n@@ -312,9 +109,9 @@\n \t\t\t\t<td><input bind:value={newRow.datum} type=\"date\" /></td>\n \t\t\t\t<td><input bind:value={newRow.zeit} type=\"time\" /></td>\n \t\t\t\t<td><input bind:value={newRow.wert} /></td>\n \t\t\t\t<td>\n-\t\t\t\t\t<select bind:value={newRow.sport} on:change={handleSportChange}>\n+\t\t\t\t\t<select bind:value={newRow.sport}>\n \t\t\t\t\t\t{#each sportarten as sport}\n \t\t\t\t\t\t\t<option value={sport}>{sport}</option>\n \t\t\t\t\t\t{/each}\n \t\t\t\t\t</select>\n@@ -323,34 +120,4 @@\n \t\t\t</tr>\n \t\t</tbody>\n \t</table>\n </main>\n-\n-<style>\n-\ttable {\n-\t\twidth: 100%;\n-\t\tborder-collapse: collapse;\n-\t\tmargin-top: 10px;\n-\t}\n-\tth,\n-\ttd {\n-\t\tborder: 1px solid #ddd;\n-\t\tpadding: 8px;\n-\t\ttext-align: left;\n-\t}\n-\tth {\n-\t\tbackground: #f4f4f4;\n-\t}\n-\tinput,\n-\tselect {\n-\t\twidth: 100%;\n-\t\tpadding: 4px;\n-\t}\n-\tnav {\n-\t\tdisplay: flex;\n-\t\tgap: 10px;\n-\t\tmargin-bottom: 10px;\n-\t}\n-\tdiv {\n-\t\tmargin-bottom: 10px;\n-\t}\n-</style>\n"
                },
                {
                    "date": 1739972402697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,10 +58,9 @@\n \t\t\t\t\tsport: row[3].trim()\n \t\t\t\t}));\n \n \t\t\tdataStore.set(importedData); // Speichert die Daten im globalen Store\n-\t\t\tconsole.log('‚úÖ Importierte Daten:', importedData);\n-\t\t\talert('CSV-Daten erfolgreich importiert!');\n+\t\t\tconsole.log('‚úÖ Daten wurden in dataStore gespeichert:', importedData);\n \t\t};\n \n \t\treader.readAsText(selectedFile);\n \t}\n"
                },
                {
                    "date": 1739977096130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n <script>\n \timport { dataStore } from '$lib/stores'; // Import des globalen Stores\n+\tlet selectedFile = null; // Speichert die ausgew√§hlte Datei\n \tlet date = new Date();\n \tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n \tlet data = [];\n \n"
                },
                {
                    "date": 1739977205584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,123 +1,115 @@\n <script>\n-\timport { dataStore } from '$lib/stores'; // Import des globalen Stores\n-\tlet selectedFile = null; // Speichert die ausgew√§hlte Datei\n+\timport { dataStore } from \"$lib/stores\"; // Import des globalen Stores\n+\tlet selectedFile = null; // Speichert die ausgew√§hlte Datei (einmalig deklarieren)\n \tlet date = new Date();\n \tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n \tlet data = [];\n-\n+  \n \tlet sportarten = [\n-\t\t'Crosstrainer',\n-\t\t'Beinpressing',\n-\t\t'Bauch',\n-\t\t'R√ºcken',\n-\t\t'H√ºfte au√üen',\n-\t\t'Bauch seitlich',\n-\t\t'Schulter',\n-\t\t'H√ºfte innen',\n-\t\t'Laufband Grundlagen',\n-\t\t'Laufband Intervall',\n-\t\t'Laufen outdoor Grundlagen',\n-\t\t'Laufen outdoor Intervall',\n-\t\t'Neues Ger√§t hinzuf√ºgen...'\n+\t  'Crosstrainer', 'Beinpressing', 'Bauch', 'R√ºcken', 'H√ºfte au√üen', \n+\t  'Bauch seitlich', 'Schulter', 'H√ºfte innen', 'Laufband Grundlagen', \n+\t  'Laufband Intervall', 'Laufen outdoor Grundlagen', 'Laufen outdoor Intervall',\n+\t  'Neues Ger√§t hinzuf√ºgen...'\n \t];\n-\n-\tlet selectedFile = null;\n-\n+  \n+\t// Hier die Deklaration von `selectedFile` nur einmal!\n+\t//let selectedFile = null;\n+  \n \tfunction addRow() {\n-\t\tdata = [...data, { ...newRow }];\n-\t\tdataStore.set(data); // Daten in den globalen Store speichern\n-\t\tnewRow = { datum: '', zeit: '', wert: '', sport: '' };\n+\t  data = [...data, { ...newRow }];\n+\t  dataStore.set(data); // Daten in den globalen Store speichern\n+\t  newRow = { datum: '', zeit: '', wert: '', sport: '' };\n \t}\n-\n+  \n \tfunction deleteRow(index) {\n-\t\tdata = data.filter((_, i) => i !== index);\n-\t\tdataStore.set(data); // Store wird aktualisiert\n+\t  data = data.filter((_, i) => i !== index);\n+\t  dataStore.set(data); // Store wird aktualisiert\n \t}\n-\n+  \n \tfunction handleFileSelect(event) {\n-\t\tselectedFile = event.target.files[0]; // Speichert die ausgew√§hlte Datei\n+\t  selectedFile = event.target.files[0]; // Speichert die ausgew√§hlte Datei\n \t}\n-\n+  \n \tfunction importCSV() {\n-\t\tif (!selectedFile) {\n-\t\t\talert('Bitte zuerst eine CSV-Datei ausw√§hlen.');\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tconst reader = new FileReader();\n-\t\treader.onload = (e) => {\n-\t\t\tconst text = e.target.result;\n-\t\t\tconst delimiter = text.includes(';') ? ';' : ',';\n-\t\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n-\n-\t\t\tconst importedData = rows\n-\t\t\t\t.filter((row) => row.length >= 4)\n-\t\t\t\t.map((row) => ({\n-\t\t\t\t\tdatum: row[0].trim(),\n-\t\t\t\t\tzeit: row[1].trim(),\n-\t\t\t\t\twert: row[2].trim(),\n-\t\t\t\t\tsport: row[3].trim()\n-\t\t\t\t}));\n-\n-\t\t\tdataStore.set(importedData); // Speichert die Daten im globalen Store\n-\t\t\tconsole.log('‚úÖ Daten wurden in dataStore gespeichert:', importedData);\n-\t\t};\n-\n-\t\treader.readAsText(selectedFile);\n+\t  if (!selectedFile) {\n+\t\talert('Bitte zuerst eine CSV-Datei ausw√§hlen.');\n+\t\treturn;\n+\t  }\n+  \n+\t  const reader = new FileReader();\n+\t  reader.onload = (e) => {\n+\t\tconst text = e.target.result;\n+\t\tconst delimiter = text.includes(';') ? ';' : ','; \n+\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n+  \n+\t\tconst importedData = rows\n+\t\t  .filter((row) => row.length >= 4)\n+\t\t  .map((row) => ({\n+\t\t\tdatum: row[0].trim(),\n+\t\t\tzeit: row[1].trim(),\n+\t\t\twert: row[2].trim(),\n+\t\t\tsport: row[3].trim()\n+\t\t  }));\n+  \n+\t\tdataStore.set(importedData); // Speichert die Daten im globalen Store\n+\t\tconsole.log('‚úÖ Daten wurden in dataStore gespeichert:', importedData);\n+\t  };\n+  \n+\t  reader.readAsText(selectedFile);\n \t}\n-</script>\n-\n-<main>\n+  </script>\n+  \n+  <main>\n \t<h1>Daten Eingeben</h1>\n-\n+  \n \t<nav>\n-\t\t<button on:click={() => date.setMonth(date.getMonth() - 1)}>‚¨Ö Vorheriger Monat</button>\n-\t\t<span>{date.toLocaleDateString()}</span>\n-\t\t<button on:click={() => date.setMonth(date.getMonth() + 1)}>N√§chster Monat ‚û°</button>\n+\t  <button on:click={() => date.setMonth(date.getMonth() - 1)}>‚¨Ö Vorheriger Monat</button>\n+\t  <span>{date.toLocaleDateString()}</span>\n+\t  <button on:click={() => date.setMonth(date.getMonth() + 1)}>N√§chster Monat ‚û°</button>\n \t</nav>\n-\n+  \n \t<!-- CSV-Upload -->\n \t<div>\n-\t\t<input type=\"file\" accept=\".csv\" on:change={handleFileSelect} />\n-\t\t<button on:click={importCSV}>üìÇ CSV hochladen</button>\n+\t  <input type=\"file\" accept=\".csv\" on:change={handleFileSelect} />\n+\t  <button on:click={importCSV}>üìÇ CSV hochladen</button>\n \t</div>\n-\n+  \n \t<table>\n-\t\t<thead>\n-\t\t\t<tr>\n-\t\t\t\t<th>Datum</th>\n-\t\t\t\t<th>Zeit</th>\n-\t\t\t\t<th>Gewicht/Dauer</th>\n-\t\t\t\t<th>Ger√§t/Sportart</th>\n-\t\t\t\t<th>Aktion</th>\n-\t\t\t</tr>\n-\t\t</thead>\n-\t\t<tbody>\n-\t\t\t{#each data as row, i}\n-\t\t\t\t<tr>\n-\t\t\t\t\t<td>{row.datum}</td>\n-\t\t\t\t\t<td>{row.zeit}</td>\n-\t\t\t\t\t<td>{row.wert}</td>\n-\t\t\t\t\t<td>{row.sport}</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<button on:click={() => deleteRow(i)}>üóëÔ∏è</button>\n-\t\t\t\t\t</td>\n-\t\t\t\t</tr>\n-\t\t\t{/each}\n-\n-\t\t\t<tr>\n-\t\t\t\t<td><input bind:value={newRow.datum} type=\"date\" /></td>\n-\t\t\t\t<td><input bind:value={newRow.zeit} type=\"time\" /></td>\n-\t\t\t\t<td><input bind:value={newRow.wert} /></td>\n-\t\t\t\t<td>\n-\t\t\t\t\t<select bind:value={newRow.sport}>\n-\t\t\t\t\t\t{#each sportarten as sport}\n-\t\t\t\t\t\t\t<option value={sport}>{sport}</option>\n-\t\t\t\t\t\t{/each}\n-\t\t\t\t\t</select>\n-\t\t\t\t</td>\n-\t\t\t\t<td><button on:click={addRow}>‚ûï</button></td>\n-\t\t\t</tr>\n-\t\t</tbody>\n+\t  <thead>\n+\t\t<tr>\n+\t\t  <th>Datum</th>\n+\t\t  <th>Zeit</th>\n+\t\t  <th>Gewicht/Dauer</th>\n+\t\t  <th>Ger√§t/Sportart</th>\n+\t\t  <th>Aktion</th>\n+\t\t</tr>\n+\t  </thead>\n+\t  <tbody>\n+\t\t{#each data as row, i}\n+\t\t  <tr>\n+\t\t\t<td>{row.datum}</td>\n+\t\t\t<td>{row.zeit}</td>\n+\t\t\t<td>{row.wert}</td>\n+\t\t\t<td>{row.sport}</td>\n+\t\t\t<td>\n+\t\t\t  <button on:click={() => deleteRow(i)}>üóëÔ∏è</button>\n+\t\t\t</td>\n+\t\t  </tr>\n+\t\t{/each}\n+  \n+\t\t<tr>\n+\t\t  <td><input bind:value={newRow.datum} type=\"date\" /></td>\n+\t\t  <td><input bind:value={newRow.zeit} type=\"time\" /></td>\n+\t\t  <td><input bind:value={newRow.wert} /></td>\n+\t\t  <td>\n+\t\t\t<select bind:value={newRow.sport}>\n+\t\t\t  {#each sportarten as sport}\n+\t\t\t\t<option value={sport}>{sport}</option>\n+\t\t\t  {/each}\n+\t\t\t</select>\n+\t\t  </td>\n+\t\t  <td><button on:click={addRow}>‚ûï</button></td>\n+\t\t</tr>\n+\t  </tbody>\n \t</table>\n-</main>\n+  </main>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739977938519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n <script>\n \timport { dataStore } from '$lib/stores'; // Import des globalen Stores\n+\timport { onDestroy } from \"svelte\";\n \tlet selectedFile = null; // Speichert die ausgew√§hlte Datei (einmalig deklarieren)\n \tlet date = new Date();\n \tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n \tlet data = [];\n"
                },
                {
                    "date": 1739977951402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,125 +1,122 @@\n <script>\n \timport { dataStore } from '$lib/stores'; // Import des globalen Stores\n-\timport { onDestroy } from 'svelte';\n \tlet selectedFile = null; // Speichert die ausgew√§hlte Datei (einmalig deklarieren)\n \tlet date = new Date();\n \tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n \tlet data = [];\n-\n+  \n \tlet sportarten = [\n-\t\t'Crosstrainer',\n-\t\t'Beinpressing',\n-\t\t'Bauch',\n-\t\t'R√ºcken',\n-\t\t'H√ºfte au√üen',\n-\t\t'Bauch seitlich',\n-\t\t'Schulter',\n-\t\t'H√ºfte innen',\n-\t\t'Laufband Grundlagen',\n-\t\t'Laufband Intervall',\n-\t\t'Laufen outdoor Grundlagen',\n-\t\t'Laufen outdoor Intervall',\n-\t\t'Neues Ger√§t hinzuf√ºgen...'\n+\t  'Crosstrainer',\n+\t  'Beinpressing',\n+\t  'Bauch',\n+\t  'R√ºcken',\n+\t  'H√ºfte au√üen',\n+\t  'Bauch seitlich',\n+\t  'Schulter',\n+\t  'H√ºfte innen',\n+\t  'Laufband Grundlagen',\n+\t  'Laufband Intervall',\n+\t  'Laufen outdoor Grundlagen',\n+\t  'Laufen outdoor Intervall',\n+\t  'Neues Ger√§t hinzuf√ºgen...'\n \t];\n-\n-\t// Hier die Deklaration von `selectedFile` nur einmal!\n-\t//let selectedFile = null;\n-\n+  \n \tfunction addRow() {\n-\t\tdata = [...data, { ...newRow }];\n-\t\tdataStore.set(data); // Daten in den globalen Store speichern\n-\t\tnewRow = { datum: '', zeit: '', wert: '', sport: '' };\n+\t  data = [...data, { ...newRow }];\n+\t  dataStore.set(data); // Daten in den globalen Store speichern\n+\t  newRow = { datum: '', zeit: '', wert: '', sport: '' };\n \t}\n-\n+  \n \tfunction deleteRow(index) {\n-\t\tdata = data.filter((_, i) => i !== index);\n-\t\tdataStore.set(data); // Store wird aktualisiert\n+\t  data = data.filter((_, i) => i !== index);\n+\t  dataStore.set(data); // Store wird aktualisiert\n \t}\n-\n+  \n \tfunction handleFileSelect(event) {\n-\t\tselectedFile = event.target.files[0]; // Speichert die ausgew√§hlte Datei\n+\t  selectedFile = event.target.files[0]; // Speichert die ausgew√§hlte Datei\n \t}\n-\n+  \n \tfunction importCSV() {\n-\t\tif (!selectedFile) {\n-\t\t\talert('Bitte zuerst eine CSV-Datei ausw√§hlen.');\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tconst reader = new FileReader();\n-\t\treader.onload = (e) => {\n-\t\t\tconst text = e.target.result;\n-\t\t\tconst delimiter = text.includes(';') ? ';' : ',';\n-\t\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n-\n-\t\t\tconst importedData = rows\n-\t\t\t\t.filter((row) => row.length >= 4)\n-\t\t\t\t.map((row) => ({\n-\t\t\t\t\tdatum: row[0].trim(),\n-\t\t\t\t\tzeit: row[1].trim(),\n-\t\t\t\t\twert: row[2].trim(),\n-\t\t\t\t\tsport: row[3].trim()\n-\t\t\t\t}));\n-\n-\t\t\tdataStore.set(importedData); // Speichert die Daten im globalen Store\n-\t\t\tconsole.log('‚úÖ Daten wurden in dataStore gespeichert:', importedData);\n-\t\t};\n-\n-\t\treader.readAsText(selectedFile);\n+\t  if (!selectedFile) {\n+\t\talert('Bitte zuerst eine CSV-Datei ausw√§hlen.');\n+\t\treturn;\n+\t  }\n+  \n+\t  const reader = new FileReader();\n+\t  reader.onload = (e) => {\n+\t\tconst text = e.target.result;\n+\t\tconst delimiter = text.includes(';') ? ';' : ','; \n+\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n+  \n+\t\tconst importedData = rows\n+\t\t  .filter((row) => row.length >= 4)\n+\t\t  .map((row) => ({\n+\t\t\tdatum: row[0].trim(),\n+\t\t\tzeit: row[1].trim(),\n+\t\t\twert: row[2].trim(),\n+\t\t\tsport: row[3].trim()\n+\t\t  }));\n+  \n+\t\t// Speichert die Daten im globalen Store\n+\t\tdataStore.set(importedData);\n+\t\tconsole.log('‚úÖ Daten wurden in dataStore gespeichert:', importedData);\n+\t  };\n+  \n+\t  reader.readAsText(selectedFile);\n \t}\n-</script>\n-\n-<main>\n+  </script>\n+  \n+  <main>\n \t<h1>Daten Eingeben</h1>\n-\n+  \n \t<nav>\n-\t\t<button on:click={() => date.setMonth(date.getMonth() - 1)}>‚¨Ö Vorheriger Monat</button>\n-\t\t<span>{date.toLocaleDateString()}</span>\n-\t\t<button on:click={() => date.setMonth(date.getMonth() + 1)}>N√§chster Monat ‚û°</button>\n+\t  <button on:click={() => date.setMonth(date.getMonth() - 1)}>‚¨Ö Vorheriger Monat</button>\n+\t  <span>{date.toLocaleDateString()}</span>\n+\t  <button on:click={() => date.setMonth(date.getMonth() + 1)}>N√§chster Monat ‚û°</button>\n \t</nav>\n-\n+  \n \t<!-- CSV-Upload -->\n \t<div>\n-\t\t<input type=\"file\" accept=\".csv\" on:change={handleFileSelect} />\n-\t\t<button on:click={importCSV}>üìÇ CSV hochladen</button>\n+\t  <input type=\"file\" accept=\".csv\" on:change={handleFileSelect} />\n+\t  <button on:click={importCSV}>üìÇ CSV hochladen</button>\n \t</div>\n-\n+  \n \t<table>\n-\t\t<thead>\n-\t\t\t<tr>\n-\t\t\t\t<th>Datum</th>\n-\t\t\t\t<th>Zeit</th>\n-\t\t\t\t<th>Gewicht/Dauer</th>\n-\t\t\t\t<th>Ger√§t/Sportart</th>\n-\t\t\t\t<th>Aktion</th>\n-\t\t\t</tr>\n-\t\t</thead>\n-\t\t<tbody>\n-\t\t\t{#each data as row, i}\n-\t\t\t\t<tr>\n-\t\t\t\t\t<td>{row.datum}</td>\n-\t\t\t\t\t<td>{row.zeit}</td>\n-\t\t\t\t\t<td>{row.wert}</td>\n-\t\t\t\t\t<td>{row.sport}</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<button on:click={() => deleteRow(i)}>üóëÔ∏è</button>\n-\t\t\t\t\t</td>\n-\t\t\t\t</tr>\n-\t\t\t{/each}\n-\n-\t\t\t<tr>\n-\t\t\t\t<td><input bind:value={newRow.datum} type=\"date\" /></td>\n-\t\t\t\t<td><input bind:value={newRow.zeit} type=\"time\" /></td>\n-\t\t\t\t<td><input bind:value={newRow.wert} /></td>\n-\t\t\t\t<td>\n-\t\t\t\t\t<select bind:value={newRow.sport}>\n-\t\t\t\t\t\t{#each sportarten as sport}\n-\t\t\t\t\t\t\t<option value={sport}>{sport}</option>\n-\t\t\t\t\t\t{/each}\n-\t\t\t\t\t</select>\n-\t\t\t\t</td>\n-\t\t\t\t<td><button on:click={addRow}>‚ûï</button></td>\n-\t\t\t</tr>\n-\t\t</tbody>\n+\t  <thead>\n+\t\t<tr>\n+\t\t  <th>Datum</th>\n+\t\t  <th>Zeit</th>\n+\t\t  <th>Gewicht/Dauer</th>\n+\t\t  <th>Ger√§t/Sportart</th>\n+\t\t  <th>Aktion</th>\n+\t\t</tr>\n+\t  </thead>\n+\t  <tbody>\n+\t\t{#each data as row, i}\n+\t\t  <tr>\n+\t\t\t<td>{row.datum}</td>\n+\t\t\t<td>{row.zeit}</td>\n+\t\t\t<td>{row.wert}</td>\n+\t\t\t<td>{row.sport}</td>\n+\t\t\t<td>\n+\t\t\t  <button on:click={() => deleteRow(i)}>üóëÔ∏è</button>\n+\t\t\t</td>\n+\t\t  </tr>\n+\t\t{/each}\n+  \n+\t\t<tr>\n+\t\t  <td><input bind:value={newRow.datum} type=\"date\" /></td>\n+\t\t  <td><input bind:value={newRow.zeit} type=\"time\" /></td>\n+\t\t  <td><input bind:value={newRow.wert} /></td>\n+\t\t  <td>\n+\t\t\t<select bind:value={newRow.sport}>\n+\t\t\t  {#each sportarten as sport}\n+\t\t\t\t<option value={sport}>{sport}</option>\n+\t\t\t  {/each}\n+\t\t\t</select>\n+\t\t  </td>\n+\t\t  <td><button on:click={addRow}>‚ûï</button></td>\n+\t\t</tr>\n+\t  </tbody>\n \t</table>\n-</main>\n+  </main>\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739970962984,
            "name": "Commit-0",
            "content": "<script>\n\timport { dataStore } from \"$lib/stores\"; // Store importieren\n\tlet date = new Date();\n\tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n\tlet data = [];\n\n\tlet sportarten = [\n\t\t'Crosstrainer',\n\t\t'Beinpressing',\n\t\t'Bauch',\n\t\t'R√ºcken',\n\t\t'H√ºfte au√üen',\n\t\t'Bauch seitlich',\n\t\t'Schulter',\n\t\t'H√ºfte innen',\n\t\t'Laufband Grundlagen',\n\t\t'Laufband Intervall',\n\t\t'Laufen outdoor Grundlagen',\n\t\t'Laufen outdoor Intervall',\n\t\t'Neues Ger√§t hinzuf√ºgen...'\n\t];\n\n\tlet selectedFile = null; // Speichert die ausgew√§hlte Datei\n\n\tfunction addRow() {\n\t\tdata = [...data, { ...newRow }];\n\t\tdataStore.set(data); // Speichert die Daten im Store\n\t\tnewRow = { datum: '', zeit: '', wert: '', sport: '' };\n\t}\n\n\tfunction deleteRow(index) {\n\t\tdata = data.filter((_, i) => i !== index);\n\t}\n\n\tfunction changeMonth(delta) {\n\t\tdate.setMonth(date.getMonth() + delta);\n\t}\n\n\tfunction handleSportChange(event) {\n\t\tif (event.target.value === 'Neues Ger√§t hinzuf√ºgen...') {\n\t\t\tlet neuesGeraet = prompt('Gib den Namen des neuen Ger√§ts ein:');\n\t\t\tif (neuesGeraet && !sportarten.includes(neuesGeraet)) {\n\t\t\t\tsportarten = [...sportarten.slice(0, -1), neuesGeraet, 'Neues Ger√§t hinzuf√ºgen...'];\n\t\t\t\tnewRow.sport = neuesGeraet;\n\t\t\t}\n\t\t} else {\n\t\t\tnewRow.sport = event.target.value;\n\t\t}\n\t}\n\n\tfunction handleFileSelect(event) {\n\t\tselectedFile = event.target.files[0]; // Speichert die ausgew√§hlte Datei\n\t}\n\n\tfunction importCSV() {\n\t\tconsole.log('üìå importCSV() wurde aufgerufen!'); // Pr√ºfen, ob die Funktion aufgerufen wird\n\n\t\tif (!selectedFile) {\n\t\t\talert('Bitte zuerst eine CSV-Datei ausw√§hlen.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst reader = new FileReader();\n\t\treader.onload = (e) => {\n\t\t\tconsole.log('üìÇ CSV-Datei wurde erfolgreich gelesen!'); // Debugging-Ausgabe\n\t\t\tconst text = e.target.result;\n\t\t\tconsole.log('üìÇ Gelesene CSV-Datei:', text);\n\n\t\t\t// Automatische Erkennung des Trennzeichens\n\t\t\tconst delimiter = text.includes(';') ? ';' : ',';\n\t\t\tconsole.log('Trennzeichen erkannt:', delimiter);\n\n\t\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n\t\t\tconsole.log('üìä Eingelesene Zeilen:', rows);\n\n\t\t\tdataStore.set(rows\n  .filter((row) => row.length >= 4) // Mindestens 4 Spalten erforderlich\n  .map((row) => ({\n    datum: row[0].trim(),\n    zeit: row[1].trim(),\n    wert: row[2].trim(),\n    sport: row[3].trim()\n  }))\n);\n\nconsole.log(\"‚úÖ Importierte Daten:\", $dataStore); // Debug-Ausgabe f√ºr den Store\nalert(\"CSV-Daten erfolgreich importiert!\");\n\t}\n</script>\n\n<main>\n\t<h1>Daten Eingeben</h1>\n\n\t<nav>\n\t\t<button on:click={() => changeMonth(-1)}>‚¨Ö Vorheriger Monat</button>\n\t\t<span>{date.toLocaleDateString()}</span>\n\t\t<button on:click={() => changeMonth(1)}>N√§chster Monat ‚û°</button>\n\t</nav>\n\n\t<!-- CSV-Upload mit Best√§tigungsbutton -->\n\t<div>\n\t\t<input type=\"file\" accept=\".csv\" on:change={handleFileSelect} />\n\t\t<button on:click={importCSV}>üìÇ CSV hochladen</button>\n\t</div>\n\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Datum</th>\n\t\t\t\t<th>Zeit</th>\n\t\t\t\t<th>Gewicht/Dauer</th>\n\t\t\t\t<th>Ger√§t/Sportart</th>\n\t\t\t\t<th>Aktion</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t{#each data as row, i}\n\t\t\t\t<tr>\n\t\t\t\t\t<td>{row.datum}</td>\n\t\t\t\t\t<td>{row.zeit}</td>\n\t\t\t\t\t<td>{row.wert}</td>\n\t\t\t\t\t<td>{row.sport}</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<button on:click={() => deleteRow(i)}>üóëÔ∏è</button>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t{/each}\n\n\t\t\t<tr>\n\t\t\t\t<td><input bind:value={newRow.datum} type=\"date\" /></td>\n\t\t\t\t<td><input bind:value={newRow.zeit} type=\"time\" /></td>\n\t\t\t\t<td><input bind:value={newRow.wert} /></td>\n\t\t\t\t<td>\n\t\t\t\t\t<select bind:value={newRow.sport} on:change={handleSportChange}>\n\t\t\t\t\t\t{#each sportarten as sport}\n\t\t\t\t\t\t\t<option value={sport}>{sport}</option>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</select>\n\t\t\t\t</td>\n\t\t\t\t<td><button on:click={addRow}>‚ûï</button></td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</main>\n\n<style>\n\ttable {\n\t\twidth: 100%;\n\t\tborder-collapse: collapse;\n\t\tmargin-top: 10px;\n\t}\n\tth,\n\ttd {\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 8px;\n\t\ttext-align: left;\n\t}\n\tth {\n\t\tbackground: #f4f4f4;\n\t}\n\tinput,\n\tselect {\n\t\twidth: 100%;\n\t\tpadding: 4px;\n\t}\n\tnav {\n\t\tdisplay: flex;\n\t\tgap: 10px;\n\t\tmargin-bottom: 10px;\n\t}\n\tdiv {\n\t\tmargin-bottom: 10px;\n\t}\n</style>\n"
        }
    ]
}