{
    "sourceFile": "admin/+page.svelte",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1739968618256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739969149186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,26 @@\n <script>\n \tlet date = new Date();\n+\n \tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n \tlet data = [];\n \n+\tlet sportarten = [\n+\t\t'Crosstrainer',\n+\t\t'Beinpressing',\n+\t\t'Bauch',\n+\t\t'R√ºcken',\n+\t\t'H√ºfte au√üen',\n+\t\t'Bauch seitlich',\n+\t\t'Schulter',\n+\t\t'H√ºfte innen',\n+\t\t'Laufband Grundlagen',\n+\t\t'Laufband Intervall',\n+\t\t'Laufen outdoor Grundlagen',\n+\t\t'Laufen outdoor Intervall',\n+\t\t'Neues Ger√§t hinzuf√ºgen...'\n+\t];\n+\n \tfunction addRow() {\n \t\tdata = [...data, { ...newRow }];\n \t\tnewRow = { datum: '', zeit: '', wert: '', sport: '' };\n \t}\n@@ -14,8 +31,20 @@\n \n \tfunction changeMonth(delta) {\n \t\tdate.setMonth(date.getMonth() + delta);\n \t}\n+\n+\tfunction handleSportChange(event) {\n+\t\tif (event.target.value === 'Neues Ger√§t hinzuf√ºgen...') {\n+\t\t\tlet neuesGeraet = prompt('Gib den Namen des neuen Ger√§ts ein:');\n+\t\t\tif (neuesGeraet && !sportarten.includes(neuesGeraet)) {\n+\t\t\t\tsportarten = [...sportarten.slice(0, -1), neuesGeraet, 'Neues Ger√§t hinzuf√ºgen...'];\n+\t\t\t\tnewRow.sport = neuesGeraet;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tnewRow.sport = event.target.value;\n+\t\t}\n+\t}\n </script>\n \n <main>\n \t<h1>Daten Eingeben</h1>\n@@ -52,9 +81,16 @@\n \t\t\t<tr>\n \t\t\t\t<td><input bind:value={newRow.datum} type=\"date\" /></td>\n \t\t\t\t<td><input bind:value={newRow.zeit} type=\"time\" /></td>\n \t\t\t\t<td><input bind:value={newRow.wert} /></td>\n-\t\t\t\t<td><input bind:value={newRow.sport} /></td>\n+\n+\t\t\t\t<td>\n+\t\t\t\t\t<select bind:value={newRow.sport} on:change={handleSportChange}>\n+\t\t\t\t\t\t{#each sportarten as sport}\n+\t\t\t\t\t\t\t<option value={sport}>{sport}</option>\n+\t\t\t\t\t\t{/each}\n+\t\t\t\t\t</select>\n+\t\t\t\t</td>\n \t\t\t\t<td><button on:click={addRow}>‚ûï</button></td>\n \t\t\t</tr>\n \t\t</tbody>\n \t</table>\n"
                },
                {
                    "date": 1739969611758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n <script>\n \tlet date = new Date();\n-\n \tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n \tlet data = [];\n \n \tlet sportarten = [\n@@ -43,8 +42,30 @@\n \t\t} else {\n \t\t\tnewRow.sport = event.target.value;\n \t\t}\n \t}\n+\n+\tfunction importCSV(event) {\n+\t\tconst file = event.target.files[0];\n+\t\tif (!file) return;\n+\n+\t\tconst reader = new FileReader();\n+\t\treader.onload = (e) => {\n+\t\t\tconst text = e.target.result;\n+\t\t\tconst rows = text.split('\\n').map((row) => row.split(';')); // CSV mit Semikolon getrennt\n+\n+\t\t\tdata = rows\n+\t\t\t\t.filter((row) => row.length >= 4) // Mindestens 4 Spalten\n+\t\t\t\t.map((row) => ({\n+\t\t\t\t\tdatum: row[0].trim(),\n+\t\t\t\t\tzeit: row[1].trim(),\n+\t\t\t\t\twert: row[2].trim(),\n+\t\t\t\t\tsport: row[3].trim()\n+\t\t\t\t}));\n+\t\t};\n+\n+\t\treader.readAsText(file);\n+\t}\n </script>\n \n <main>\n \t<h1>Daten Eingeben</h1>\n@@ -54,8 +75,11 @@\n \t\t<span>{date.toLocaleDateString()}</span>\n \t\t<button on:click={() => changeMonth(1)}>N√§chster Monat ‚û°</button>\n \t</nav>\n \n+\t<!-- CSV-Upload -->\n+\t<input type=\"file\" accept=\".csv\" on:change={importCSV} />\n+\n \t<table>\n \t\t<thead>\n \t\t\t<tr>\n \t\t\t\t<th>Datum</th>\n@@ -81,9 +105,8 @@\n \t\t\t<tr>\n \t\t\t\t<td><input bind:value={newRow.datum} type=\"date\" /></td>\n \t\t\t\t<td><input bind:value={newRow.zeit} type=\"time\" /></td>\n \t\t\t\t<td><input bind:value={newRow.wert} /></td>\n-\n \t\t\t\t<td>\n \t\t\t\t\t<select bind:value={newRow.sport} on:change={handleSportChange}>\n \t\t\t\t\t\t{#each sportarten as sport}\n \t\t\t\t\t\t\t<option value={sport}>{sport}</option>\n@@ -110,9 +133,10 @@\n \t}\n \tth {\n \t\tbackground: #f4f4f4;\n \t}\n-\tinput {\n+\tinput,\n+\tselect {\n \t\twidth: 100%;\n \t\tpadding: 4px;\n \t}\n \tnav {\n"
                },
                {
                    "date": 1739969904382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,10 @@\n \t\t'Laufen outdoor Intervall',\n \t\t'Neues Ger√§t hinzuf√ºgen...'\n \t];\n \n+\tlet selectedFile = null; // Speichert die ausgew√§hlte Datei\n+\n \tfunction addRow() {\n \t\tdata = [...data, { ...newRow }];\n \t\tnewRow = { datum: '', zeit: '', wert: '', sport: '' };\n \t}\n@@ -43,28 +45,36 @@\n \t\t\tnewRow.sport = event.target.value;\n \t\t}\n \t}\n \n-\tfunction importCSV(event) {\n-\t\tconst file = event.target.files[0];\n-\t\tif (!file) return;\n+\tfunction handleFileSelect(event) {\n+\t\tselectedFile = event.target.files[0]; // Speichert die ausgew√§hlte Datei\n+\t}\n \n+\tfunction importCSV() {\n+\t\tif (!selectedFile) {\n+\t\t\talert('Bitte zuerst eine CSV-Datei ausw√§hlen.');\n+\t\t\treturn;\n+\t\t}\n+\n \t\tconst reader = new FileReader();\n \t\treader.onload = (e) => {\n \t\t\tconst text = e.target.result;\n \t\t\tconst rows = text.split('\\n').map((row) => row.split(';')); // CSV mit Semikolon getrennt\n \n \t\t\tdata = rows\n-\t\t\t\t.filter((row) => row.length >= 4) // Mindestens 4 Spalten\n+\t\t\t\t.filter((row) => row.length >= 4) // Mindestens 4 Spalten erforderlich\n \t\t\t\t.map((row) => ({\n \t\t\t\t\tdatum: row[0].trim(),\n \t\t\t\t\tzeit: row[1].trim(),\n \t\t\t\t\twert: row[2].trim(),\n \t\t\t\t\tsport: row[3].trim()\n \t\t\t\t}));\n+\n+\t\t\talert('CSV-Daten erfolgreich importiert!');\n \t\t};\n \n-\t\treader.readAsText(file);\n+\t\treader.readAsText(selectedFile);\n \t}\n </script>\n \n <main>\n@@ -75,10 +85,13 @@\n \t\t<span>{date.toLocaleDateString()}</span>\n \t\t<button on:click={() => changeMonth(1)}>N√§chster Monat ‚û°</button>\n \t</nav>\n \n-\t<!-- CSV-Upload -->\n-\t<input type=\"file\" accept=\".csv\" on:change={importCSV} />\n+\t<!-- CSV-Upload mit Best√§tigungsbutton -->\n+\t<div>\n+\t\t<input type=\"file\" accept=\".csv\" on:change={handleFileSelect} />\n+\t\t<button on:click={importCSV}>üìÇ CSV hochladen</button>\n+\t</div>\n \n \t<table>\n \t\t<thead>\n \t\t\t<tr>\n@@ -143,5 +156,8 @@\n \t\tdisplay: flex;\n \t\tgap: 10px;\n \t\tmargin-bottom: 10px;\n \t}\n+\tdiv {\n+\t\tmargin-bottom: 10px;\n+\t}\n </style>\n"
                },
                {
                    "date": 1739970326794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,18 +50,28 @@\n \t\tselectedFile = event.target.files[0]; // Speichert die ausgew√§hlte Datei\n \t}\n \n \tfunction importCSV() {\n+\t\tconsole.log('üìå importCSV() wurde aufgerufen!'); // Pr√ºfen, ob die Funktion aufgerufen wird\n+\n \t\tif (!selectedFile) {\n \t\t\talert('Bitte zuerst eine CSV-Datei ausw√§hlen.');\n \t\t\treturn;\n \t\t}\n \n \t\tconst reader = new FileReader();\n \t\treader.onload = (e) => {\n+\t\t\tconsole.log('üìÇ CSV-Datei wurde erfolgreich gelesen!'); // Debugging-Ausgabe\n \t\t\tconst text = e.target.result;\n-\t\t\tconst rows = text.split('\\n').map((row) => row.split(';')); // CSV mit Semikolon getrennt\n+\t\t\tconsole.log('üìÇ Gelesene CSV-Datei:', text);\n \n+\t\t\t// Automatische Erkennung des Trennzeichens\n+\t\t\tconst delimiter = text.includes(';') ? ';' : ',';\n+\t\t\tconsole.log('Trennzeichen erkannt:', delimiter);\n+\n+\t\t\tconst rows = text.split('\\n').map((row) => row.split(delimiter));\n+\t\t\tconsole.log('üìä Eingelesene Zeilen:', rows);\n+\n \t\t\tdata = rows\n \t\t\t\t.filter((row) => row.length >= 4) // Mindestens 4 Spalten erforderlich\n \t\t\t\t.map((row) => ({\n \t\t\t\t\tdatum: row[0].trim(),\n@@ -69,11 +79,13 @@\n \t\t\t\t\twert: row[2].trim(),\n \t\t\t\t\tsport: row[3].trim()\n \t\t\t\t}));\n \n+\t\t\tconsole.log('‚úÖ Importierte Daten:', data);\n \t\t\talert('CSV-Daten erfolgreich importiert!');\n \t\t};\n \n+\t\treader.onerror = () => alert('Fehler beim Lesen der Datei.');\n \t\treader.readAsText(selectedFile);\n \t}\n </script>\n \n"
                }
            ],
            "date": 1739968618256,
            "name": "Commit-0",
            "content": "<script>\n\tlet date = new Date();\n\tlet newRow = { datum: '', zeit: '', wert: '', sport: '' };\n\tlet data = [];\n\n\tfunction addRow() {\n\t\tdata = [...data, { ...newRow }];\n\t\tnewRow = { datum: '', zeit: '', wert: '', sport: '' };\n\t}\n\n\tfunction deleteRow(index) {\n\t\tdata = data.filter((_, i) => i !== index);\n\t}\n\n\tfunction changeMonth(delta) {\n\t\tdate.setMonth(date.getMonth() + delta);\n\t}\n</script>\n\n<main>\n\t<h1>Daten Eingeben</h1>\n\n\t<nav>\n\t\t<button on:click={() => changeMonth(-1)}>‚¨Ö Vorheriger Monat</button>\n\t\t<span>{date.toLocaleDateString()}</span>\n\t\t<button on:click={() => changeMonth(1)}>N√§chster Monat ‚û°</button>\n\t</nav>\n\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Datum</th>\n\t\t\t\t<th>Zeit</th>\n\t\t\t\t<th>Gewicht/Dauer</th>\n\t\t\t\t<th>Ger√§t/Sportart</th>\n\t\t\t\t<th>Aktion</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t{#each data as row, i}\n\t\t\t\t<tr>\n\t\t\t\t\t<td>{row.datum}</td>\n\t\t\t\t\t<td>{row.zeit}</td>\n\t\t\t\t\t<td>{row.wert}</td>\n\t\t\t\t\t<td>{row.sport}</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<button on:click={() => deleteRow(i)}>üóëÔ∏è</button>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t{/each}\n\n\t\t\t<tr>\n\t\t\t\t<td><input bind:value={newRow.datum} type=\"date\" /></td>\n\t\t\t\t<td><input bind:value={newRow.zeit} type=\"time\" /></td>\n\t\t\t\t<td><input bind:value={newRow.wert} /></td>\n\t\t\t\t<td><input bind:value={newRow.sport} /></td>\n\t\t\t\t<td><button on:click={addRow}>‚ûï</button></td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</main>\n\n<style>\n\ttable {\n\t\twidth: 100%;\n\t\tborder-collapse: collapse;\n\t\tmargin-top: 10px;\n\t}\n\tth,\n\ttd {\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 8px;\n\t\ttext-align: left;\n\t}\n\tth {\n\t\tbackground: #f4f4f4;\n\t}\n\tinput {\n\t\twidth: 100%;\n\t\tpadding: 4px;\n\t}\n\tnav {\n\t\tdisplay: flex;\n\t\tgap: 10px;\n\t\tmargin-bottom: 10px;\n\t}\n</style>\n"
        }
    ]
}